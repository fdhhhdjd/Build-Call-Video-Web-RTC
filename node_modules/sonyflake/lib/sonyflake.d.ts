import type { DecomposedSonyflake, Snowflake, SonyflakeDecomposeOptions, SonyflakeGenerateCustomIdOptions, SonyflakeOptions } from './interfaces';
export declare class Sonyflake {
    /**
     * Snowflake start epoch
     */
    readonly epoch: number;
    /**
     * Internal worker ID
     */
    readonly machineId: bigint;
    /**
     * Sequence increment for process
     */
    private sequence;
    /**
     * Latest timestamp
     */
    private latestTimestamp;
    /**
     * Constructor
     */
    constructor({ epoch, machineId, }?: SonyflakeOptions);
    /**
     * Generate a Snowflake
     */
    nextId(): Snowflake;
    /**
     * Decompose the Snowflake with local epoch
     */
    decompose(snowflake: Snowflake): DecomposedSonyflake;
    /**
     * Generate a custom Snowflake
     */
    generateCustomId({ timestamp, sequence, }: SonyflakeGenerateCustomIdOptions): Snowflake;
    /**
     * Decompose the Snowflake timestamp
     */
    static decomposeTimestamp(snowflake: Snowflake, epoch: number): number;
    /**
     * Decompose the Snowflake machineId
     */
    static decomposeMachineId(snowflake: Snowflake): number;
    /**
     * Decompose the Snowflake sequence
     */
    static decomposeSequence(snowflake: Snowflake): number;
    /**
     * Decompose the Snowflake
     */
    static decompose(snowflake: Snowflake, { epoch }: SonyflakeDecomposeOptions): DecomposedSonyflake;
}

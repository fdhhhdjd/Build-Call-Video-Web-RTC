{"ast":null,"code":"import { resetCallDataStateInitiate, setCallerUsernameInitiate, setCallingDialogVisibleInitiate, setCallRejectedInitiate, setCallStateInitiate, setLocalStreamInitiate, setRemoteStreamInitiate } from \"../../Redux/Action/ActionCall\"; // import {\n//   preOfferAnswers,\n//   defaultConstrains,\n//   configuration,\n//   callStates,\n// } from \"../ShareData\";\n\nimport store from \"../../Redux/Store\";\nimport * as wss from \"../Connect-Soket/wssConnection\";\nconst preOfferAnswers = {\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\n  CALL_REJECTED: \"CALL_REJECTED\",\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\"\n};\nconst defaultConstrains = {\n  video: {\n    width: 480,\n    height: 360\n  },\n  audio: true\n};\nconst configuration = {\n  iceServers: [{\n    urls: \"stun:stun.l.google.com:13902\"\n  }]\n};\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel; //Get Camera\n\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStreamInitiate(stream));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_AVAILABLE\n    }));\n    createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n}; //create peer connect\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  }\n\n  peerConnection.ontrack = _ref => {\n    let {\n      streams: [stream]\n    } = _ref;\n    store.dispatch(setRemoteStreamInitiate(stream));\n  };\n\n  dataChannel = peerConnection.createDataChannel(\"chat\");\n\n  dataChannel.onopen = () => {\n    console.log(\"chat data channel succesfully opened\");\n  };\n\n  peerConnection.onicecandidate = event => {\n    console.log(\"geeting candidates from stun server\");\n\n    if (event.candidate) {\n      wss.sendWebRTCCandidate({\n        candidate: event.candidate,\n        connectedUserSocketId: connectedUserSocketId\n      });\n    }\n  };\n\n  peerConnection.onconnectionstatechange = event => {\n    if (peerConnection.connectionState === \"connected\") {\n      console.log(\"succesfully connected with other peer\");\n    }\n  };\n}; //Call\n\n\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_REQUESTED\n    }));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n}; //accept call\n\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallStateInitiate({\n    call: callStates.CALL_IN_PROGRESS\n  }));\n}; //reject call\n\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n}; //call\n\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisibleInitiate(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    sendOffer();\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not able to pick up the call right now\";\n    } else {\n      rejectionReason = \"Call rejected by the callee\";\n    }\n\n    store.dispatch(setCallRejectedInitiate({\n      rejected: true,\n      reason: rejectionReason\n    }));\n    resetCallData();\n  }\n};\n\nconst sendOffer = async () => {\n  const offer = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offer);\n  wss.sendWebRTCOffer({\n    calleeSocketId: connectedUserSocketId,\n    offer: offer\n  });\n};\n\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallerUsernameInitiate(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisibleInitiate({\n    data: true\n  }));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().user.username\n    }\n  });\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n}; //Function Reject\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\n}; //show dialog\n\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  console.log(\"hangup----\");\n  resetCallDataAfterHangUp();\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n\n  if (store.getState().call.screenSharingActive) {\n    screenSharingStream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  store.dispatch(resetCallDataStateInitiate());\n};","map":{"version":3,"names":["resetCallDataStateInitiate","setCallerUsernameInitiate","setCallingDialogVisibleInitiate","setCallRejectedInitiate","setCallStateInitiate","setLocalStreamInitiate","setRemoteStreamInitiate","store","wss","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","defaultConstrains","video","width","height","audio","configuration","iceServers","urls","connectedUserSocketId","peerConnection","dataChannel","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","call","callStates","CALL_AVAILABLE","createPeerConnection","catch","err","console","log","RTCPeerConnection","localStream","getState","track","getTracks","addTrack","ontrack","streams","createDataChannel","onopen","onicecandidate","event","candidate","sendWebRTCCandidate","onconnectionstatechange","connectionState","handlePreOffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","acceptIncomingCallRequest","CALL_IN_PROGRESS","rejectIncomingCallRequest","resetCallData","handlePreOfferAnswer","sendOffer","rejectionReason","rejected","reason","offer","createOffer","setLocalDescription","sendWebRTCOffer","calleeSocketId","callToOtherUser","calleeDetails","socketId","sendPreOffer","callee","caller","username","user","callState","hangUp","sendUserHangedUp","resetCallDataAfterHangUp","close","getVideoTracks","enabled","getAudioTracks","screenSharingActive","screenSharingStream","forEach","stop"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import {\r\n  resetCallDataStateInitiate,\r\n  setCallerUsernameInitiate,\r\n  setCallingDialogVisibleInitiate,\r\n  setCallRejectedInitiate,\r\n  setCallStateInitiate,\r\n  setLocalStreamInitiate,\r\n  setRemoteStreamInitiate,\r\n} from \"../../Redux/Action/ActionCall\";\r\n// import {\r\n//   preOfferAnswers,\r\n//   defaultConstrains,\r\n//   configuration,\r\n//   callStates,\r\n// } from \"../ShareData\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as wss from \"../Connect-Soket/wssConnection\";\r\nconst preOfferAnswers = {\r\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\r\n  CALL_REJECTED: \"CALL_REJECTED\",\r\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\",\r\n};\r\n\r\nconst defaultConstrains = {\r\n  video: {\r\n    width: 480,\r\n    height: 360,\r\n  },\r\n  audio: true,\r\n};\r\n\r\nconst configuration = {\r\n  iceServers: [\r\n    {\r\n      urls: \"stun:stun.l.google.com:13902\",\r\n    },\r\n  ],\r\n};\r\n\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\n\r\n//Get Camera\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStreamInitiate(stream));\r\n      store.dispatch(setCallStateInitiate({ call: callStates.CALL_AVAILABLE }));\r\n      createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n//create peer connect\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n  const localStream = store.getState().call.localStream;\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStreamInitiate(stream));\r\n  };\r\n\r\n  dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  dataChannel.onopen = () => {\r\n    console.log(\"chat data channel succesfully opened\");\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log(\"geeting candidates from stun server\");\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId,\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === \"connected\") {\r\n      console.log(\"succesfully connected with other peer\");\r\n    }\r\n  };\r\n};\r\n//Call\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\r\n    store.dispatch(setCallStateInitiate({ call: callStates.CALL_REQUESTED }));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n//accept call\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallStateInitiate({ call: callStates.CALL_IN_PROGRESS }));\r\n};\r\n//reject call\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\n//call\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisibleInitiate(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = \"Callee is not able to pick up the call right now\";\r\n    } else {\r\n      rejectionReason = \"Call rejected by the callee\";\r\n    }\r\n    store.dispatch(\r\n      setCallRejectedInitiate({\r\n        rejected: true,\r\n        reason: rejectionReason,\r\n      })\r\n    );\r\n\r\n    resetCallData();\r\n  }\r\n};\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  wss.sendWebRTCOffer({\r\n    calleeSocketId: connectedUserSocketId,\r\n    offer: offer,\r\n  });\r\n};\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallerUsernameInitiate(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisibleInitiate({ data: true }));\r\n\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().user.username,\r\n    },\r\n  });\r\n};\r\nexport const checkIfCallIsPossible = () => {\r\n  if (\r\n    store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n//Function Reject\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\r\n};\r\n//show dialog\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n  console.log(\"hangup----\");\r\n  resetCallDataAfterHangUp();\r\n};\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach((track) => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataStateInitiate());\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
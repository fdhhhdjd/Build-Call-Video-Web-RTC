{"ast":null,"code":"import { resetCallDataStateInitiate, setCallerUsernameInitiate, setCallingDialogVisibleInitiate, setCallRejectedInitiate, setCallStateInitiate, setLocalStreamInitiate, setRemoteStreamInitiate } from \"../../Redux/Action/ActionCall\"; // import {\n//   preOfferAnswers,\n//   defaultConstrains,\n//   configuration,\n//   callStates,\n// } from \"../ShareData\";\n\nimport store from \"../../Redux/Store\";\nimport * as wss from \"../Connect-Soket/wssConnection\";\nconst preOfferAnswers = {\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\n  CALL_REJECTED: \"CALL_REJECTED\",\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\"\n};\nconst defaultConstrains = {\n  video: {\n    width: 480,\n    height: 360\n  },\n  audio: true\n};\nconst configuration = {\n  iceServers: [{\n    urls: \"stun:stun.l.google.com:13902\"\n  }]\n};\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel;\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStream(stream));\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n    createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n};\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  }\n\n  peerConnection.ontrack = _ref => {\n    let {\n      streams: [stream]\n    } = _ref;\n    store.dispatch(setRemoteStream(stream));\n  }; // incoming data channel messages\n\n\n  peerConnection.ondatachannel = event => {\n    const dataChannel = event.channel;\n\n    dataChannel.onopen = () => {\n      console.log(\"peer connection is ready to receive data channel messages\");\n    };\n\n    dataChannel.onmessage = event => {\n      store.dispatch(setMessage(true, event.data));\n    };\n  };\n\n  dataChannel = peerConnection.createDataChannel(\"chat\");\n\n  dataChannel.onopen = () => {\n    console.log(\"chat data channel succesfully opened\");\n  };\n\n  peerConnection.onicecandidate = event => {\n    console.log(\"geeting candidates from stun server\");\n\n    if (event.candidate) {\n      wss.sendWebRTCCandidate({\n        candidate: event.candidate,\n        connectedUserSocketId: connectedUserSocketId\n      });\n    }\n  };\n\n  peerConnection.onconnectionstatechange = event => {\n    if (peerConnection.connectionState === \"connected\") {\n      console.log(\"succesfully connected with other peer\");\n    }\n  };\n};\n\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisible(true));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().dashboard.username\n    }\n  });\n};\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisible(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    sendOffer();\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not able to pick up the call right now\";\n    } else {\n      rejectionReason = \"Call rejected by the callee\";\n    }\n\n    store.dispatch(setCallRejected({\n      rejected: true,\n      reason: rejectionReason\n    }));\n    resetCallData();\n  }\n};\n\nconst sendOffer = async () => {\n  const offer = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offer);\n  wss.sendWebRTCOffer({\n    calleeSocketId: connectedUserSocketId,\n    offer: offer\n  });\n};\n\nexport const handleOffer = async data => {\n  await peerConnection.setRemoteDescription(data.offer);\n  const answer = await peerConnection.createAnswer();\n  await peerConnection.setLocalDescription(answer);\n  wss.sendWebRTCAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: answer\n  });\n};\nexport const handleAnswer = async data => {\n  await peerConnection.setRemoteDescription(data.answer);\n};\nexport const handleCandidate = async data => {\n  try {\n    console.log(\"adding ice candidates\");\n    await peerConnection.addIceCandidate(data.candidate);\n  } catch (err) {\n    console.error(\"error occured when trying to add received ice candidate\", err);\n  }\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n};\nlet screenSharingStream;\nexport const switchForScreenSharingStream = async () => {\n  if (!store.getState().call.screenSharingActive) {\n    try {\n      screenSharingStream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      store.dispatch(setScreenSharingActive(true));\n      const senders = peerConnection.getSenders();\n      const sender = senders.find(sender => sender.track.kind === screenSharingStream.getVideoTracks()[0].kind);\n      sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\n    } catch (err) {\n      console.error(\"error occured when trying to get screen sharing stream\", err);\n    }\n  } else {\n    const localStream = store.getState().call.localStream;\n    const senders = peerConnection.getSenders();\n    const sender = senders.find(sender => sender.track.kind === localStream.getVideoTracks()[0].kind);\n    sender.replaceTrack(localStream.getVideoTracks()[0]);\n    store.dispatch(setScreenSharingActive(false));\n    screenSharingStream.getTracks().forEach(track => track.stop());\n  }\n};\nexport const handleUserHangedUp = () => {\n  resetCallDataAfterHangUp();\n};\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  resetCallDataAfterHangUp();\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n\n  if (store.getState().call.screenSharingActive) {\n    screenSharingStream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  store.dispatch(resetCallDataState());\n};\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n};\nexport const sendMessageUsingDataChannel = message => {\n  dataChannel.send(message);\n};","map":{"version":3,"names":["resetCallDataStateInitiate","setCallerUsernameInitiate","setCallingDialogVisibleInitiate","setCallRejectedInitiate","setCallStateInitiate","setLocalStreamInitiate","setRemoteStreamInitiate","store","wss","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","defaultConstrains","video","width","height","audio","configuration","iceServers","urls","connectedUserSocketId","peerConnection","dataChannel","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","setLocalStream","setCallState","callStates","CALL_AVAILABLE","createPeerConnection","catch","err","console","log","RTCPeerConnection","localStream","getState","call","track","getTracks","addTrack","ontrack","streams","setRemoteStream","ondatachannel","event","channel","onopen","onmessage","setMessage","data","createDataChannel","onicecandidate","candidate","sendWebRTCCandidate","onconnectionstatechange","connectionState","callToOtherUser","calleeDetails","socketId","CALL_IN_PROGRESS","setCallingDialogVisible","sendPreOffer","callee","caller","username","dashboard","handlePreOffer","checkIfCallIsPossible","callerSocketId","setCallerUsername","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","acceptIncomingCallRequest","rejectIncomingCallRequest","resetCallData","handlePreOfferAnswer","sendOffer","rejectionReason","setCallRejected","rejected","reason","offer","createOffer","setLocalDescription","sendWebRTCOffer","calleeSocketId","handleOffer","setRemoteDescription","createAnswer","sendWebRTCAnswer","handleAnswer","handleCandidate","addIceCandidate","error","callState","screenSharingStream","switchForScreenSharingStream","screenSharingActive","getDisplayMedia","setScreenSharingActive","senders","getSenders","sender","find","kind","getVideoTracks","replaceTrack","forEach","stop","handleUserHangedUp","resetCallDataAfterHangUp","hangUp","sendUserHangedUp","close","enabled","getAudioTracks","resetCallDataState","sendMessageUsingDataChannel","message","send"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import {\r\n  resetCallDataStateInitiate,\r\n  setCallerUsernameInitiate,\r\n  setCallingDialogVisibleInitiate,\r\n  setCallRejectedInitiate,\r\n  setCallStateInitiate,\r\n  setLocalStreamInitiate,\r\n  setRemoteStreamInitiate,\r\n} from \"../../Redux/Action/ActionCall\";\r\n// import {\r\n//   preOfferAnswers,\r\n//   defaultConstrains,\r\n//   configuration,\r\n//   callStates,\r\n// } from \"../ShareData\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as wss from \"../Connect-Soket/wssConnection\";\r\nconst preOfferAnswers = {\r\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\r\n  CALL_REJECTED: \"CALL_REJECTED\",\r\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\",\r\n};\r\n\r\nconst defaultConstrains = {\r\n  video: {\r\n    width: 480,\r\n    height: 360,\r\n  },\r\n  audio: true,\r\n};\r\n\r\nconst configuration = {\r\n  iceServers: [\r\n    {\r\n      urls: \"stun:stun.l.google.com:13902\",\r\n    },\r\n  ],\r\n};\r\n\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\n\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStream(stream));\r\n      store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n      createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStream(stream));\r\n  };\r\n\r\n  // incoming data channel messages\r\n  peerConnection.ondatachannel = (event) => {\r\n    const dataChannel = event.channel;\r\n\r\n    dataChannel.onopen = () => {\r\n      console.log(\"peer connection is ready to receive data channel messages\");\r\n    };\r\n\r\n    dataChannel.onmessage = (event) => {\r\n      store.dispatch(setMessage(true, event.data));\r\n    };\r\n  };\r\n\r\n  dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  dataChannel.onopen = () => {\r\n    console.log(\"chat data channel succesfully opened\");\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log(\"geeting candidates from stun server\");\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId,\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === \"connected\") {\r\n      console.log(\"succesfully connected with other peer\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisible(true));\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().dashboard.username,\r\n    },\r\n  });\r\n};\r\n\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsername(data.callerUsername));\r\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisible(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = \"Callee is not able to pick up the call right now\";\r\n    } else {\r\n      rejectionReason = \"Call rejected by the callee\";\r\n    }\r\n    store.dispatch(\r\n      setCallRejected({\r\n        rejected: true,\r\n        reason: rejectionReason,\r\n      })\r\n    );\r\n\r\n    resetCallData();\r\n  }\r\n};\r\n\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  wss.sendWebRTCOffer({\r\n    calleeSocketId: connectedUserSocketId,\r\n    offer: offer,\r\n  });\r\n};\r\n\r\nexport const handleOffer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.offer);\r\n  const answer = await peerConnection.createAnswer();\r\n  await peerConnection.setLocalDescription(answer);\r\n  wss.sendWebRTCAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: answer,\r\n  });\r\n};\r\n\r\nexport const handleAnswer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.answer);\r\n};\r\n\r\nexport const handleCandidate = async (data) => {\r\n  try {\r\n    console.log(\"adding ice candidates\");\r\n    await peerConnection.addIceCandidate(data.candidate);\r\n  } catch (err) {\r\n    console.error(\r\n      \"error occured when trying to add received ice candidate\",\r\n      err\r\n    );\r\n  }\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n  if (\r\n    store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nlet screenSharingStream;\r\n\r\nexport const switchForScreenSharingStream = async () => {\r\n  if (!store.getState().call.screenSharingActive) {\r\n    try {\r\n      screenSharingStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n      });\r\n      store.dispatch(setScreenSharingActive(true));\r\n      const senders = peerConnection.getSenders();\r\n      const sender = senders.find(\r\n        (sender) =>\r\n          sender.track.kind === screenSharingStream.getVideoTracks()[0].kind\r\n      );\r\n      sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\r\n    } catch (err) {\r\n      console.error(\r\n        \"error occured when trying to get screen sharing stream\",\r\n        err\r\n      );\r\n    }\r\n  } else {\r\n    const localStream = store.getState().call.localStream;\r\n    const senders = peerConnection.getSenders();\r\n    const sender = senders.find(\r\n      (sender) => sender.track.kind === localStream.getVideoTracks()[0].kind\r\n    );\r\n    sender.replaceTrack(localStream.getVideoTracks()[0]);\r\n    store.dispatch(setScreenSharingActive(false));\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n  }\r\n};\r\n\r\nexport const handleUserHangedUp = () => {\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach((track) => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataState());\r\n};\r\n\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n};\r\n\r\nexport const sendMessageUsingDataChannel = (message) => {\r\n  dataChannel.send(message);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import socketClient from \"socket.io-client\";\nimport { broadcastEventTypes } from \"../../Utils/ShareData\";\nconst SERVER = \"http://localhost:5001\";\nlet socket;\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on(\"connection\", () => {\n    console.log(\"succesfully connected with wss server\");\n    console.log(socket.id);\n  });\n  socket.on(\"broadcast\", data => {\n    console.log(data, \"data\");\n    handleBroadcastEvents(data);\n  });\n};\nexport const registerNewUser = username => {\n  socket.emit(\"register-new-user\", {\n    username: username,\n    socketId: socket.id\n  });\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id); // store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n\n      console.log(\"111111111111\");\n      break;\n\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\n      const groupCallRooms = data.groupCallRooms.filter(room => room.socketId !== socket.id);\n      const activeGroupCallRoomId = webRTCGroupCallHandler.checkActiveGroupCall();\n\n      if (activeGroupCallRoomId) {\n        const room = groupCallRooms.find(room => room.roomId === activeGroupCallRoomId);\n\n        if (!room) {\n          // webRTCGroupCallHandler.clearGroupData();\n          console.log(\"33333\");\n        }\n      } // store.dispatch(dashboardActions.setGroupCalls(groupCallRooms));\n\n\n      break;\n\n    default:\n      break;\n  }\n};","map":{"version":3,"names":["socketClient","broadcastEventTypes","SERVER","socket","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","registerNewUser","username","emit","socketId","event","ACTIVE_USERS","activeUsers","filter","activeUser","GROUP_CALL_ROOMS","groupCallRooms","room","activeGroupCallRoomId","webRTCGroupCallHandler","checkActiveGroupCall","find","roomId"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/Connect-Soket/wssConnection.js"],"sourcesContent":["import socketClient from \"socket.io-client\";\r\nimport { broadcastEventTypes } from \"../../Utils/ShareData\";\r\nconst SERVER = \"http://localhost:5001\";\r\n\r\nlet socket;\r\n\r\nexport const connectWithWebSocket = () => {\r\n  socket = socketClient(SERVER);\r\n\r\n  socket.on(\"connection\", () => {\r\n    console.log(\"succesfully connected with wss server\");\r\n    console.log(socket.id);\r\n  });\r\n  socket.on(\"broadcast\", (data) => {\r\n    console.log(data, \"data\");\r\n    handleBroadcastEvents(data);\r\n  });\r\n};\r\nexport const registerNewUser = (username) => {\r\n  socket.emit(\"register-new-user\", {\r\n    username: username,\r\n    socketId: socket.id,\r\n  });\r\n};\r\n\r\nconst handleBroadcastEvents = (data) => {\r\n  switch (data.event) {\r\n    case broadcastEventTypes.ACTIVE_USERS:\r\n      const activeUsers = data.activeUsers.filter(\r\n        (activeUser) => activeUser.socketId !== socket.id\r\n      );\r\n      // store.dispatch(dashboardActions.setActiveUsers(activeUsers));\r\n      console.log(\"111111111111\");\r\n\r\n      break;\r\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\r\n      const groupCallRooms = data.groupCallRooms.filter(\r\n        (room) => room.socketId !== socket.id\r\n      );\r\n      const activeGroupCallRoomId =\r\n        webRTCGroupCallHandler.checkActiveGroupCall();\r\n\r\n      if (activeGroupCallRoomId) {\r\n        const room = groupCallRooms.find(\r\n          (room) => room.roomId === activeGroupCallRoomId\r\n        );\r\n        if (!room) {\r\n          // webRTCGroupCallHandler.clearGroupData();\r\n          console.log(\"33333\");\r\n        }\r\n      }\r\n      // store.dispatch(dashboardActions.setGroupCalls(groupCallRooms));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kBAAzB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,MAAMC,MAAM,GAAG,uBAAf;AAEA,IAAIC,MAAJ;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;EACxCD,MAAM,GAAGH,YAAY,CAACE,MAAD,CAArB;EAEAC,MAAM,CAACE,EAAP,CAAU,YAAV,EAAwB,MAAM;IAC5BC,OAAO,CAACC,GAAR,CAAY,uCAAZ;IACAD,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,EAAnB;EACD,CAHD;EAIAL,MAAM,CAACE,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;IAC/BH,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAAkB,MAAlB;IACAC,qBAAqB,CAACD,IAAD,CAArB;EACD,CAHD;AAID,CAXM;AAYP,OAAO,MAAME,eAAe,GAAIC,QAAD,IAAc;EAC3CT,MAAM,CAACU,IAAP,CAAY,mBAAZ,EAAiC;IAC/BD,QAAQ,EAAEA,QADqB;IAE/BE,QAAQ,EAAEX,MAAM,CAACK;EAFc,CAAjC;AAID,CALM;;AAOP,MAAME,qBAAqB,GAAID,IAAD,IAAU;EACtC,QAAQA,IAAI,CAACM,KAAb;IACE,KAAKd,mBAAmB,CAACe,YAAzB;MACE,MAAMC,WAAW,GAAGR,IAAI,CAACQ,WAAL,CAAiBC,MAAjB,CACjBC,UAAD,IAAgBA,UAAU,CAACL,QAAX,KAAwBX,MAAM,CAACK,EAD7B,CAApB,CADF,CAIE;;MACAF,OAAO,CAACC,GAAR,CAAY,cAAZ;MAEA;;IACF,KAAKN,mBAAmB,CAACmB,gBAAzB;MACE,MAAMC,cAAc,GAAGZ,IAAI,CAACY,cAAL,CAAoBH,MAApB,CACpBI,IAAD,IAAUA,IAAI,CAACR,QAAL,KAAkBX,MAAM,CAACK,EADd,CAAvB;MAGA,MAAMe,qBAAqB,GACzBC,sBAAsB,CAACC,oBAAvB,EADF;;MAGA,IAAIF,qBAAJ,EAA2B;QACzB,MAAMD,IAAI,GAAGD,cAAc,CAACK,IAAf,CACVJ,IAAD,IAAUA,IAAI,CAACK,MAAL,KAAgBJ,qBADf,CAAb;;QAGA,IAAI,CAACD,IAAL,EAAW;UACT;UACAhB,OAAO,CAACC,GAAR,CAAY,OAAZ;QACD;MACF,CAfH,CAgBE;;;MACA;;IACF;MACE;EA5BJ;AA8BD,CA/BD"},"metadata":{},"sourceType":"module"}
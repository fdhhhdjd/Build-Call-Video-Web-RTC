{"ast":null,"code":"import { resetCallDataStateInitiate, setCallerUsernameInitiate, setCallingDialogVisibleInitiate, setCallRejectedInitiate, setCallStateInitiate, setLocalStreamInitiate, setRemoteStreamInitiate } from \"../../Redux/Action/ActionCall\";\nimport { preOfferAnswers, defaultConstrains, configuration, callStates } from \"../ShareData\";\nimport store from \"../../Redux/Store\";\nimport * as wss from \"../Connect-Soket/wssConnection\";\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel;\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStreamInitiate(stream));\n    store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\n    createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n};\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  console.log(peerConnection, \"aloo\");\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  }\n\n  peerConnection.ontrack = _ref => {\n    let {\n      streams: [stream]\n    } = _ref;\n    store.dispatch(setRemoteStreamInitiate(stream));\n  }; // incoming data channel messages\n  // peerConnection.ondatachannel = (event) => {\n  //   const dataChannel = event.channel;\n  //   dataChannel.onopen = () => {\n  //     console.log(\"peer connection is ready to receive data channel messages\");\n  //   };\n  //   dataChannel.onmessage = (event) => {\n  //     store.dispatch(setMessage(true, event.data));\n  //   };\n  // };\n\n\n  dataChannel = peerConnection.createDataChannel(\"chat\");\n\n  dataChannel.onopen = () => {\n    console.log(\"chat data channel succesfully opened\");\n  };\n\n  peerConnection.onicecandidate = event => {\n    console.log(\"geeting candidates from stun server\");\n\n    if (event.candidate) {\n      wss.sendWebRTCCandidate({\n        candidate: event.candidate,\n        connectedUserSocketId: connectedUserSocketId\n      });\n    }\n  };\n\n  peerConnection.onconnectionstatechange = event => {\n    if (peerConnection.connectionState === \"connected\") {\n      console.log(\"succesfully connected with other peer\");\n    }\n  };\n};\n\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisibleInitiate({\n    data: true\n  }));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().user.username\n    }\n  });\n};\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_REQUESTED\n    }));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallStateInitiate({\n    call: callStates.CALL_IN_PROGRESS\n  }));\n};\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisibleInitiate(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    sendOffer();\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not able to pick up the call right now\";\n    } else {\n      rejectionReason = \"Call rejected by the callee\";\n    }\n\n    store.dispatch(setCallRejectedInitiate({\n      rejected: true,\n      reason: rejectionReason\n    }));\n    resetCallData();\n  }\n};\n\nconst sendOffer = async () => {\n  const offer = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offer);\n  wss.sendWebRTCOffer({\n    calleeSocketId: connectedUserSocketId,\n    offer: offer\n  });\n};\n\nexport const handleOffer = async data => {\n  await peerConnection.setRemoteDescription(data.offer);\n  const answer = await peerConnection.createAnswer();\n  await peerConnection.setLocalDescription(answer);\n  wss.sendWebRTCAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: answer\n  });\n};\nexport const handleAnswer = async data => {\n  await peerConnection.setRemoteDescription(data.answer);\n};\nexport const handleCandidate = async data => {\n  try {\n    console.log(\"adding ice candidates\");\n    await peerConnection.addIceCandidate(data.candidate);\n  } catch (err) {\n    console.error(\"error occured when trying to add received ice candidate\", err);\n  }\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n};\nlet screenSharingStream; // export const switchForScreenSharingStream = async () => {\n//   if (!store.getState().call.screenSharingActive) {\n//     try {\n//       screenSharingStream = await navigator.mediaDevices.getDisplayMedia({\n//         video: true,\n//       });\n//       store.dispatch(setScreenSharingActive(true));\n//       const senders = peerConnection.getSenders();\n//       const sender = senders.find(\n//         (sender) =>\n//           sender.track.kind === screenSharingStream.getVideoTracks()[0].kind\n//       );\n//       sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\n//     } catch (err) {\n//       console.error(\n//         \"error occured when trying to get screen sharing stream\",\n//         err\n//       );\n//     }\n//   } else {\n//     const localStream = store.getState().call.localStream;\n//     const senders = peerConnection.getSenders();\n//     const sender = senders.find(\n//       (sender) => sender.track.kind === localStream.getVideoTracks()[0].kind\n//     );\n//     sender.replaceTrack(localStream.getVideoTracks()[0]);\n//     store.dispatch(setScreenSharingActive(false));\n//     screenSharingStream.getTracks().forEach((track) => track.stop());\n//   }\n// };\n\nexport const handleUserHangedUp = () => {\n  resetCallDataAfterHangUp();\n};\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  resetCallDataAfterHangUp();\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n\n  if (store.getState().call.screenSharingActive) {\n    screenSharingStream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  store.dispatch(resetCallDataStateInitiate());\n};\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallStateInitiate({\n    call: callStates.CALL_AVAILABLE\n  }));\n};\nexport const sendMessageUsingDataChannel = message => {\n  dataChannel.send(message);\n};","map":{"version":3,"names":["resetCallDataStateInitiate","setCallerUsernameInitiate","setCallingDialogVisibleInitiate","setCallRejectedInitiate","setCallStateInitiate","setLocalStreamInitiate","setRemoteStreamInitiate","preOfferAnswers","defaultConstrains","configuration","callStates","store","wss","connectedUserSocketId","peerConnection","dataChannel","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","CALL_AVAILABLE","createPeerConnection","catch","err","console","log","RTCPeerConnection","localStream","getState","call","track","getTracks","addTrack","ontrack","streams","createDataChannel","onopen","onicecandidate","event","candidate","sendWebRTCCandidate","onconnectionstatechange","connectionState","callToOtherUser","calleeDetails","socketId","CALL_IN_PROGRESS","data","sendPreOffer","callee","caller","username","user","handlePreOffer","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","CALL_NOT_AVAILABLE","acceptIncomingCallRequest","CALL_ACCEPTED","rejectIncomingCallRequest","CALL_REJECTED","resetCallData","handlePreOfferAnswer","sendOffer","rejectionReason","rejected","reason","offer","createOffer","setLocalDescription","sendWebRTCOffer","calleeSocketId","handleOffer","setRemoteDescription","createAnswer","sendWebRTCAnswer","handleAnswer","handleCandidate","addIceCandidate","error","callState","screenSharingStream","handleUserHangedUp","resetCallDataAfterHangUp","hangUp","sendUserHangedUp","close","getVideoTracks","enabled","getAudioTracks","screenSharingActive","forEach","stop","sendMessageUsingDataChannel","message","send"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import {\r\n  resetCallDataStateInitiate,\r\n  setCallerUsernameInitiate,\r\n  setCallingDialogVisibleInitiate,\r\n  setCallRejectedInitiate,\r\n  setCallStateInitiate,\r\n  setLocalStreamInitiate,\r\n  setRemoteStreamInitiate,\r\n} from \"../../Redux/Action/ActionCall\";\r\nimport {\r\n  preOfferAnswers,\r\n  defaultConstrains,\r\n  configuration,\r\n  callStates,\r\n} from \"../ShareData\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as wss from \"../Connect-Soket/wssConnection\";\r\n\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\n\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStreamInitiate(stream));\r\n      store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\r\n      createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n  console.log(peerConnection, \"aloo\");\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStreamInitiate(stream));\r\n  };\r\n\r\n  // incoming data channel messages\r\n  // peerConnection.ondatachannel = (event) => {\r\n  //   const dataChannel = event.channel;\r\n\r\n  //   dataChannel.onopen = () => {\r\n  //     console.log(\"peer connection is ready to receive data channel messages\");\r\n  //   };\r\n\r\n  //   dataChannel.onmessage = (event) => {\r\n  //     store.dispatch(setMessage(true, event.data));\r\n  //   };\r\n  // };\r\n\r\n  dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  dataChannel.onopen = () => {\r\n    console.log(\"chat data channel succesfully opened\");\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log(\"geeting candidates from stun server\");\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId,\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === \"connected\") {\r\n      console.log(\"succesfully connected with other peer\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisibleInitiate({ data: true }));\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().user.username,\r\n    },\r\n  });\r\n};\r\n\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\r\n    store.dispatch(setCallStateInitiate({ call: callStates.CALL_REQUESTED }));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallStateInitiate({ call: callStates.CALL_IN_PROGRESS }));\r\n};\r\n\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisibleInitiate(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = \"Callee is not able to pick up the call right now\";\r\n    } else {\r\n      rejectionReason = \"Call rejected by the callee\";\r\n    }\r\n    store.dispatch(\r\n      setCallRejectedInitiate({\r\n        rejected: true,\r\n        reason: rejectionReason,\r\n      })\r\n    );\r\n\r\n    resetCallData();\r\n  }\r\n};\r\n\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  wss.sendWebRTCOffer({\r\n    calleeSocketId: connectedUserSocketId,\r\n    offer: offer,\r\n  });\r\n};\r\n\r\nexport const handleOffer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.offer);\r\n  const answer = await peerConnection.createAnswer();\r\n  await peerConnection.setLocalDescription(answer);\r\n  wss.sendWebRTCAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: answer,\r\n  });\r\n};\r\n\r\nexport const handleAnswer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.answer);\r\n};\r\n\r\nexport const handleCandidate = async (data) => {\r\n  try {\r\n    console.log(\"adding ice candidates\");\r\n    await peerConnection.addIceCandidate(data.candidate);\r\n  } catch (err) {\r\n    console.error(\r\n      \"error occured when trying to add received ice candidate\",\r\n      err\r\n    );\r\n  }\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n  if (\r\n    store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nlet screenSharingStream;\r\n\r\n// export const switchForScreenSharingStream = async () => {\r\n//   if (!store.getState().call.screenSharingActive) {\r\n//     try {\r\n//       screenSharingStream = await navigator.mediaDevices.getDisplayMedia({\r\n//         video: true,\r\n//       });\r\n//       store.dispatch(setScreenSharingActive(true));\r\n//       const senders = peerConnection.getSenders();\r\n//       const sender = senders.find(\r\n//         (sender) =>\r\n//           sender.track.kind === screenSharingStream.getVideoTracks()[0].kind\r\n//       );\r\n//       sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\r\n//     } catch (err) {\r\n//       console.error(\r\n//         \"error occured when trying to get screen sharing stream\",\r\n//         err\r\n//       );\r\n//     }\r\n//   } else {\r\n//     const localStream = store.getState().call.localStream;\r\n//     const senders = peerConnection.getSenders();\r\n//     const sender = senders.find(\r\n//       (sender) => sender.track.kind === localStream.getVideoTracks()[0].kind\r\n//     );\r\n//     sender.replaceTrack(localStream.getVideoTracks()[0]);\r\n//     store.dispatch(setScreenSharingActive(false));\r\n//     screenSharingStream.getTracks().forEach((track) => track.stop());\r\n//   }\r\n// };\r\n\r\nexport const handleUserHangedUp = () => {\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach((track) => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataStateInitiate());\r\n};\r\n\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallStateInitiate({ call: callStates.CALL_AVAILABLE }));\r\n};\r\n\r\nexport const sendMessageUsingDataChannel = (message) => {\r\n  dataChannel.send(message);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
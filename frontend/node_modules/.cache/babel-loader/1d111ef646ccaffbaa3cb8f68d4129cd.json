{"ast":null,"code":"import { resetCallDataStateInitiate, setCallerUsernameInitiate, setCallingDialogVisibleInitiate, setCallRejectedInitiate, setCallStateInitiate, setLocalStreamInitiate, setRemoteStreamInitiate } from \"../../Redux/Action/ActionCall\";\nimport { preOfferAnswers, defaultConstrains, configuration, callStates } from \"../ShareData\";\nimport store from \"../../Redux/Store\";\nimport * as wss from \"../Connect-Soket/wssConnection\";\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel; //Get Camera\n\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStreamInitiate(stream));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_AVAILABLE\n    }));\n    createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n}; //create peer connect\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  }\n\n  peerConnection.ontrack = _ref => {\n    let {\n      streams: [stream]\n    } = _ref;\n    store.dispatch(setRemoteStreamInitiate(stream));\n  }; // incoming data channel messages\n\n\n  peerConnection.ondatachannel = event => {\n    const dataChannel = event.channel;\n\n    dataChannel.onopen = () => {\n      console.log(\"peer connection is ready to receive data channel messages\");\n    }; // dataChannel.onmessage = (event) => {\n    //   store.dispatch(setMessage(true, event.data));\n    // };\n\n  };\n\n  dataChannel = peerConnection.createDataChannel(\"chat\");\n\n  dataChannel.onopen = () => {\n    console.log(\"chat data channel succesfully opened\");\n  };\n\n  peerConnection.onicecandidate = event => {\n    console.log(\"geeting candidates from stun server\");\n\n    if (event.candidate) {\n      wss.sendWebRTCCandidate({\n        candidate: event.candidate,\n        connectedUserSocketId: connectedUserSocketId\n      });\n    }\n  };\n\n  peerConnection.onconnectionstatechange = event => {\n    if (peerConnection.connectionState === \"connected\") {\n      console.log(\"succesfully connected with other peer\");\n    }\n  };\n}; //Call\n\n\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_REQUESTED\n    }));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n}; //accept call\n\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallStateInitiate({\n    call: callStates.CALL_IN_PROGRESS\n  }));\n}; //reject call\n\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n}; //call\n\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisibleInitiate(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    sendOffer();\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not able to pick up the call right now\";\n    } else {\n      rejectionReason = \"Call rejected by the callee\";\n    }\n\n    store.dispatch(setCallRejectedInitiate({\n      rejected: true,\n      reason: rejectionReason\n    }));\n    resetCallData();\n  }\n};\n\nconst sendOffer = async () => {\n  const offer = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offer);\n  wss.sendWebRTCOffer({\n    calleeSocketId: connectedUserSocketId,\n    offer: offer\n  });\n};\n\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisibleInitiate({\n    data: true\n  }));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().user.username\n    }\n  });\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n}; //Function Reject\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\n}; //show dialog\n\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  console.log(\"hangup----\");\n  resetCallDataAfterHangUp();\n};\nexport const handleUserHangedUp = () => {\n  resetCallDataAfterHangUp();\n};\nexport const handleCandidate = async data => {\n  try {\n    console.log(\"adding ice candidates\");\n    await peerConnection.addIceCandidate(data.candidate);\n  } catch (err) {\n    console.error(\"error occured when trying to add received ice candidate\", err);\n  }\n};\nexport const handleOffer = async data => {\n  await peerConnection.setRemoteDescription(data.offer);\n  const answer = await peerConnection.createAnswer();\n  await peerConnection.setLocalDescription(answer);\n  wss.sendWebRTCAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: answer\n  });\n};\nexport const handleAnswer = async data => {\n  await peerConnection.setRemoteDescription(data.answer);\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true; // if (store.getState().call.screenSharingActive) {\n  //   screenSharingStream.getTracks().forEach((track) => {\n  //     track.stop();\n  //   });\n  // }\n\n  store.dispatch(resetCallDataStateInitiate());\n};","map":{"version":3,"names":["resetCallDataStateInitiate","setCallerUsernameInitiate","setCallingDialogVisibleInitiate","setCallRejectedInitiate","setCallStateInitiate","setLocalStreamInitiate","setRemoteStreamInitiate","preOfferAnswers","defaultConstrains","configuration","callStates","store","wss","connectedUserSocketId","peerConnection","dataChannel","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","call","CALL_AVAILABLE","createPeerConnection","catch","err","console","log","RTCPeerConnection","localStream","getState","track","getTracks","addTrack","ontrack","streams","ondatachannel","event","channel","onopen","createDataChannel","onicecandidate","candidate","sendWebRTCCandidate","onconnectionstatechange","connectionState","handlePreOffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","CALL_NOT_AVAILABLE","acceptIncomingCallRequest","CALL_ACCEPTED","CALL_IN_PROGRESS","rejectIncomingCallRequest","CALL_REJECTED","resetCallData","handlePreOfferAnswer","sendOffer","rejectionReason","rejected","reason","offer","createOffer","setLocalDescription","sendWebRTCOffer","calleeSocketId","callToOtherUser","calleeDetails","socketId","sendPreOffer","callee","caller","username","user","callState","hangUp","sendUserHangedUp","resetCallDataAfterHangUp","handleUserHangedUp","handleCandidate","addIceCandidate","error","handleOffer","setRemoteDescription","createAnswer","sendWebRTCAnswer","handleAnswer","close","getVideoTracks","enabled","getAudioTracks"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import {\r\n  resetCallDataStateInitiate,\r\n  setCallerUsernameInitiate,\r\n  setCallingDialogVisibleInitiate,\r\n  setCallRejectedInitiate,\r\n  setCallStateInitiate,\r\n  setLocalStreamInitiate,\r\n  setRemoteStreamInitiate,\r\n} from \"../../Redux/Action/ActionCall\";\r\nimport {\r\n  preOfferAnswers,\r\n  defaultConstrains,\r\n  configuration,\r\n  callStates,\r\n} from \"../ShareData\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as wss from \"../Connect-Soket/wssConnection\";\r\n\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\n\r\n//Get Camera\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStreamInitiate(stream));\r\n      store.dispatch(setCallStateInitiate({ call: callStates.CALL_AVAILABLE }));\r\n      createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n//create peer connect\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStreamInitiate(stream));\r\n  };\r\n\r\n  // incoming data channel messages\r\n  peerConnection.ondatachannel = (event) => {\r\n    const dataChannel = event.channel;\r\n\r\n    dataChannel.onopen = () => {\r\n      console.log(\"peer connection is ready to receive data channel messages\");\r\n    };\r\n\r\n    // dataChannel.onmessage = (event) => {\r\n    //   store.dispatch(setMessage(true, event.data));\r\n    // };\r\n  };\r\n\r\n  dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  dataChannel.onopen = () => {\r\n    console.log(\"chat data channel succesfully opened\");\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log(\"geeting candidates from stun server\");\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId,\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === \"connected\") {\r\n      console.log(\"succesfully connected with other peer\");\r\n    }\r\n  };\r\n};\r\n//Call\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\r\n    store.dispatch(setCallStateInitiate({ call: callStates.CALL_REQUESTED }));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n//accept call\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallStateInitiate({ call: callStates.CALL_IN_PROGRESS }));\r\n};\r\n//reject call\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\n//call\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisibleInitiate(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = \"Callee is not able to pick up the call right now\";\r\n    } else {\r\n      rejectionReason = \"Call rejected by the callee\";\r\n    }\r\n    store.dispatch(\r\n      setCallRejectedInitiate({\r\n        rejected: true,\r\n        reason: rejectionReason,\r\n      })\r\n    );\r\n\r\n    resetCallData();\r\n  }\r\n};\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  wss.sendWebRTCOffer({\r\n    calleeSocketId: connectedUserSocketId,\r\n    offer: offer,\r\n  });\r\n};\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisibleInitiate({ data: true }));\r\n\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().user.username,\r\n    },\r\n  });\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n  if (\r\n    store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n//Function Reject\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\r\n};\r\n//show dialog\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n  console.log(\"hangup----\");\r\n  resetCallDataAfterHangUp();\r\n};\r\nexport const handleUserHangedUp = () => {\r\n  resetCallDataAfterHangUp();\r\n};\r\nexport const handleCandidate = async (data) => {\r\n  try {\r\n    console.log(\"adding ice candidates\");\r\n    await peerConnection.addIceCandidate(data.candidate);\r\n  } catch (err) {\r\n    console.error(\r\n      \"error occured when trying to add received ice candidate\",\r\n      err\r\n    );\r\n  }\r\n};\r\nexport const handleOffer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.offer);\r\n  const answer = await peerConnection.createAnswer();\r\n  await peerConnection.setLocalDescription(answer);\r\n  wss.sendWebRTCAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: answer,\r\n  });\r\n};\r\nexport const handleAnswer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.answer);\r\n};\r\n\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  // if (store.getState().call.screenSharingActive) {\r\n  //   screenSharingStream.getTracks().forEach((track) => {\r\n  //     track.stop();\r\n  //   });\r\n  // }\r\n\r\n  store.dispatch(resetCallDataStateInitiate());\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
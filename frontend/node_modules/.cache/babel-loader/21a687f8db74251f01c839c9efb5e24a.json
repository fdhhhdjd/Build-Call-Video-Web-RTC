{"ast":null,"code":"import store from \"../../store/store\";\nimport { setLocalStream, setCallState, callStates, setCallingDialogVisible, setCallerUsername, setCallRejected, setRemoteStream, setScreenSharingActive, resetCallDataState, setMessage } from \"../../store/actions/callActions\";\nimport * as wss from \"../wssConnection/wssConnection\";\nconst preOfferAnswers = {\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\n  CALL_REJECTED: \"CALL_REJECTED\",\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\"\n};\nconst defaultConstrains = {\n  video: {\n    width: 480,\n    height: 360\n  },\n  audio: true\n};\nconst configuration = {\n  iceServers: [{\n    urls: \"stun:stun.l.google.com:13902\"\n  }]\n};\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel;\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStream(stream));\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n    createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n};\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  console.log(peerConnection, \"aloo\");\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  }\n\n  peerConnection.ontrack = _ref => {\n    let {\n      streams: [stream]\n    } = _ref;\n    store.dispatch(setRemoteStream(stream));\n  }; // incoming data channel messages\n\n\n  peerConnection.ondatachannel = event => {\n    const dataChannel = event.channel;\n\n    dataChannel.onopen = () => {\n      console.log(\"peer connection is ready to receive data channel messages\");\n    };\n\n    dataChannel.onmessage = event => {\n      store.dispatch(setMessage(true, event.data));\n    };\n  };\n\n  dataChannel = peerConnection.createDataChannel(\"chat\");\n\n  dataChannel.onopen = () => {\n    console.log(\"chat data channel succesfully opened\");\n  };\n\n  peerConnection.onicecandidate = event => {\n    console.log(\"geeting candidates from stun server\");\n\n    if (event.candidate) {\n      wss.sendWebRTCCandidate({\n        candidate: event.candidate,\n        connectedUserSocketId: connectedUserSocketId\n      });\n    }\n  };\n\n  peerConnection.onconnectionstatechange = event => {\n    if (peerConnection.connectionState === \"connected\") {\n      console.log(\"succesfully connected with other peer\");\n    }\n  };\n};\n\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisible(true));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().dashboard.username\n    }\n  });\n};\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisible(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    sendOffer();\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not able to pick up the call right now\";\n    } else {\n      rejectionReason = \"Call rejected by the callee\";\n    }\n\n    store.dispatch(setCallRejected({\n      rejected: true,\n      reason: rejectionReason\n    }));\n    resetCallData();\n  }\n};\n\nconst sendOffer = async () => {\n  const offer = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offer);\n  wss.sendWebRTCOffer({\n    calleeSocketId: connectedUserSocketId,\n    offer: offer\n  });\n};\n\nexport const handleOffer = async data => {\n  await peerConnection.setRemoteDescription(data.offer);\n  const answer = await peerConnection.createAnswer();\n  await peerConnection.setLocalDescription(answer);\n  wss.sendWebRTCAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: answer\n  });\n};\nexport const handleAnswer = async data => {\n  await peerConnection.setRemoteDescription(data.answer);\n};\nexport const handleCandidate = async data => {\n  try {\n    console.log(\"adding ice candidates\");\n    await peerConnection.addIceCandidate(data.candidate);\n  } catch (err) {\n    console.error(\"error occured when trying to add received ice candidate\", err);\n  }\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n};\nlet screenSharingStream;\nexport const switchForScreenSharingStream = async () => {\n  if (!store.getState().call.screenSharingActive) {\n    try {\n      screenSharingStream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      store.dispatch(setScreenSharingActive(true));\n      const senders = peerConnection.getSenders();\n      const sender = senders.find(sender => sender.track.kind === screenSharingStream.getVideoTracks()[0].kind);\n      sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\n    } catch (err) {\n      console.error(\"error occured when trying to get screen sharing stream\", err);\n    }\n  } else {\n    const localStream = store.getState().call.localStream;\n    const senders = peerConnection.getSenders();\n    const sender = senders.find(sender => sender.track.kind === localStream.getVideoTracks()[0].kind);\n    sender.replaceTrack(localStream.getVideoTracks()[0]);\n    store.dispatch(setScreenSharingActive(false));\n    screenSharingStream.getTracks().forEach(track => track.stop());\n  }\n};\nexport const handleUserHangedUp = () => {\n  resetCallDataAfterHangUp();\n};\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  resetCallDataAfterHangUp();\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n\n  if (store.getState().call.screenSharingActive) {\n    screenSharingStream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  store.dispatch(resetCallDataState());\n};\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n};\nexport const sendMessageUsingDataChannel = message => {\n  dataChannel.send(message);\n};","map":{"version":3,"names":["store","setLocalStream","setCallState","callStates","setCallingDialogVisible","setCallerUsername","setCallRejected","setRemoteStream","setScreenSharingActive","resetCallDataState","setMessage","wss","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","defaultConstrains","video","width","height","audio","configuration","iceServers","urls","connectedUserSocketId","peerConnection","dataChannel","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","CALL_AVAILABLE","createPeerConnection","catch","err","console","log","RTCPeerConnection","localStream","getState","call","track","getTracks","addTrack","ontrack","streams","ondatachannel","event","channel","onopen","onmessage","data","createDataChannel","onicecandidate","candidate","sendWebRTCCandidate","onconnectionstatechange","connectionState","callToOtherUser","calleeDetails","socketId","CALL_IN_PROGRESS","sendPreOffer","callee","caller","username","dashboard","handlePreOffer","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","acceptIncomingCallRequest","rejectIncomingCallRequest","resetCallData","handlePreOfferAnswer","sendOffer","rejectionReason","rejected","reason","offer","createOffer","setLocalDescription","sendWebRTCOffer","calleeSocketId","handleOffer","setRemoteDescription","createAnswer","sendWebRTCAnswer","handleAnswer","handleCandidate","addIceCandidate","error","callState","screenSharingStream","switchForScreenSharingStream","screenSharingActive","getDisplayMedia","senders","getSenders","sender","find","kind","getVideoTracks","replaceTrack","forEach","stop","handleUserHangedUp","resetCallDataAfterHangUp","hangUp","sendUserHangedUp","close","enabled","getAudioTracks","sendMessageUsingDataChannel","message","send"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import store from \"../../store/store\";\r\nimport {\r\n  setLocalStream,\r\n  setCallState,\r\n  callStates,\r\n  setCallingDialogVisible,\r\n  setCallerUsername,\r\n  setCallRejected,\r\n  setRemoteStream,\r\n  setScreenSharingActive,\r\n  resetCallDataState,\r\n  setMessage,\r\n} from \"../../store/actions/callActions\";\r\nimport * as wss from \"../wssConnection/wssConnection\";\r\n\r\nconst preOfferAnswers = {\r\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\r\n  CALL_REJECTED: \"CALL_REJECTED\",\r\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\",\r\n};\r\n\r\nconst defaultConstrains = {\r\n  video: {\r\n    width: 480,\r\n    height: 360,\r\n  },\r\n  audio: true,\r\n};\r\n\r\nconst configuration = {\r\n  iceServers: [\r\n    {\r\n      urls: \"stun:stun.l.google.com:13902\",\r\n    },\r\n  ],\r\n};\r\n\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\n\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStream(stream));\r\n      store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n      createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n  console.log(peerConnection, \"aloo\");\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStream(stream));\r\n  };\r\n\r\n  // incoming data channel messages\r\n  peerConnection.ondatachannel = (event) => {\r\n    const dataChannel = event.channel;\r\n\r\n    dataChannel.onopen = () => {\r\n      console.log(\"peer connection is ready to receive data channel messages\");\r\n    };\r\n\r\n    dataChannel.onmessage = (event) => {\r\n      store.dispatch(setMessage(true, event.data));\r\n    };\r\n  };\r\n\r\n  dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  dataChannel.onopen = () => {\r\n    console.log(\"chat data channel succesfully opened\");\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log(\"geeting candidates from stun server\");\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId,\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === \"connected\") {\r\n      console.log(\"succesfully connected with other peer\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisible(true));\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().dashboard.username,\r\n    },\r\n  });\r\n};\r\n\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsername(data.callerUsername));\r\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisible(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = \"Callee is not able to pick up the call right now\";\r\n    } else {\r\n      rejectionReason = \"Call rejected by the callee\";\r\n    }\r\n    store.dispatch(\r\n      setCallRejected({\r\n        rejected: true,\r\n        reason: rejectionReason,\r\n      })\r\n    );\r\n\r\n    resetCallData();\r\n  }\r\n};\r\n\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  wss.sendWebRTCOffer({\r\n    calleeSocketId: connectedUserSocketId,\r\n    offer: offer,\r\n  });\r\n};\r\n\r\nexport const handleOffer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.offer);\r\n  const answer = await peerConnection.createAnswer();\r\n  await peerConnection.setLocalDescription(answer);\r\n  wss.sendWebRTCAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: answer,\r\n  });\r\n};\r\n\r\nexport const handleAnswer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.answer);\r\n};\r\n\r\nexport const handleCandidate = async (data) => {\r\n  try {\r\n    console.log(\"adding ice candidates\");\r\n    await peerConnection.addIceCandidate(data.candidate);\r\n  } catch (err) {\r\n    console.error(\r\n      \"error occured when trying to add received ice candidate\",\r\n      err\r\n    );\r\n  }\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n  if (\r\n    store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nlet screenSharingStream;\r\n\r\nexport const switchForScreenSharingStream = async () => {\r\n  if (!store.getState().call.screenSharingActive) {\r\n    try {\r\n      screenSharingStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n      });\r\n      store.dispatch(setScreenSharingActive(true));\r\n      const senders = peerConnection.getSenders();\r\n      const sender = senders.find(\r\n        (sender) =>\r\n          sender.track.kind === screenSharingStream.getVideoTracks()[0].kind\r\n      );\r\n      sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\r\n    } catch (err) {\r\n      console.error(\r\n        \"error occured when trying to get screen sharing stream\",\r\n        err\r\n      );\r\n    }\r\n  } else {\r\n    const localStream = store.getState().call.localStream;\r\n    const senders = peerConnection.getSenders();\r\n    const sender = senders.find(\r\n      (sender) => sender.track.kind === localStream.getVideoTracks()[0].kind\r\n    );\r\n    sender.replaceTrack(localStream.getVideoTracks()[0]);\r\n    store.dispatch(setScreenSharingActive(false));\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n  }\r\n};\r\n\r\nexport const handleUserHangedUp = () => {\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach((track) => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataState());\r\n};\r\n\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n};\r\n\r\nexport const sendMessageUsingDataChannel = (message) => {\r\n  dataChannel.send(message);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as wss from \"../Connect-Soket/wssConnection\";\nimport store from \"../../Redux/Store\";\nimport { setCallStateInitiate } from \"../../Redux/Action/ActionCall\";\nlet myPeer;\nlet myPeerId;\nlet groupCallRoomId;\nlet groupCallHost = false;\nexport const connectWithMyPeer = () => {\n  myPeer = new window.Peer(undefined, {\n    path: \"/peerjs\",\n    host: \"/\",\n    port: \"5000\"\n  });\n  myPeer.on(\"open\", id => {\n    console.log(\"succesfully connected with peer server\");\n    myPeerId = id;\n  });\n  myPeer.on(\"call\", call => {\n    call.answer(store.getState().call.localStream);\n    call.on(\"stream\", incomingStream => {\n      const streams = store.getState().call.groupCallStreams;\n      const stream = streams.find(stream => stream.id === incomingStream.id);\n\n      if (!stream) {\n        addVideoStream(incomingStream);\n      }\n    });\n  });\n};\nexport const createNewGroupCall = () => {//   groupCallHost = true;\n  //   wss.registerGroupCall({\n  //     username: store.getState().dashboard.username,\n  //     peerId: myPeerId,\n  //   });\n  //   store.dispatch(setGroupCallActive(true));\n  //   store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const joinGroupCall = (hostSocketId, roomId) => {\n  //   const localStream = store.getState().call.localStream;\n  //   groupCallRoomId = roomId;\n  //   wss.userWantsToJoinGroupCall({\n  //     peerId: myPeerId,\n  //     hostSocketId,\n  //     roomId,\n  //     localStreamId: localStream.id,\n  //   });\n  //   store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\n};\nexport const connectToNewUser = data => {//   const localStream = store.getState().call.localStream;\n  //   const call = myPeer.call(data.peerId, localStream);\n  //   call.on(\"stream\", (incomingStream) => {\n  //     const streams = store.getState().call.groupCallStreams;\n  //     const stream = streams.find((stream) => stream.id === incomingStream.id);\n  //     if (!stream) {\n  //       addVideoStream(incomingStream);\n  //     }\n  //   });\n};\nexport const leaveGroupCall = () => {//   if (groupCallHost) {\n  //     wss.groupCallClosedByHost({\n  //       peerId: myPeerId,\n  //     });\n  //   } else {\n  //     wss.userLeftGroupCall({\n  //       streamId: store.getState().call.localStream.id,\n  //       roomId: groupCallRoomId,\n  //     });\n  //   }\n  //   clearGroupData();\n};\nexport const clearGroupData = () => {//   groupCallRoomId = null;\n  //   groupCallHost = null;\n  //   store.dispatch(clearGroupCallData());\n  //   myPeer.destroy();\n  //   connectWithMyPeer();\n  //   const localStream = store.getState().call.localStream;\n  //   localStream.getVideoTracks()[0].enabled = true;\n  //   localStream.getAudioTracks()[0].enabled = true;\n};\nexport const removeInactiveStream = data => {//   const groupCallStreams = store\n  //     .getState()\n  //     .call.groupCallStreams.filter((stream) => stream.id !== data.streamId);\n  //   store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\n};\n\nconst addVideoStream = incomingStream => {//   const groupCallStreams = [\n  //     ...store.getState().call.groupCallStreams,\n  //     incomingStream,\n  //   ];\n  //   store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\n}; // if group call is active return roomId if not return false\n\n\nexport const checkActiveGroupCall = () => {//   if (store.getState().call.groupCallActive) {\n  //     return groupCallRoomId;\n  //   } else {\n  //     return false;\n  //   }\n};","map":{"version":3,"names":["wss","store","setCallStateInitiate","myPeer","myPeerId","groupCallRoomId","groupCallHost","connectWithMyPeer","window","Peer","undefined","path","host","port","on","id","console","log","call","answer","getState","localStream","incomingStream","streams","groupCallStreams","stream","find","addVideoStream","createNewGroupCall","joinGroupCall","hostSocketId","roomId","dispatch","callStates","CALL_IN_PROGRESS","connectToNewUser","data","leaveGroupCall","clearGroupData","removeInactiveStream","checkActiveGroupCall"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/webRTCGroupCallHandler.js"],"sourcesContent":["import * as wss from \"../Connect-Soket/wssConnection\";\r\nimport store from \"../../Redux/Store\";\r\nimport { setCallStateInitiate } from \"../../Redux/Action/ActionCall\";\r\n\r\nlet myPeer;\r\nlet myPeerId;\r\nlet groupCallRoomId;\r\nlet groupCallHost = false;\r\n\r\nexport const connectWithMyPeer = () => {\r\n  myPeer = new window.Peer(undefined, {\r\n    path: \"/peerjs\",\r\n    host: \"/\",\r\n    port: \"5000\",\r\n  });\r\n\r\n  myPeer.on(\"open\", (id) => {\r\n    console.log(\"succesfully connected with peer server\");\r\n    myPeerId = id;\r\n  });\r\n\r\n  myPeer.on(\"call\", (call) => {\r\n    call.answer(store.getState().call.localStream);\r\n    call.on(\"stream\", (incomingStream) => {\r\n      const streams = store.getState().call.groupCallStreams;\r\n      const stream = streams.find((stream) => stream.id === incomingStream.id);\r\n\r\n      if (!stream) {\r\n        addVideoStream(incomingStream);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const createNewGroupCall = () => {\r\n  //   groupCallHost = true;\r\n  //   wss.registerGroupCall({\r\n  //     username: store.getState().dashboard.username,\r\n  //     peerId: myPeerId,\r\n  //   });\r\n  //   store.dispatch(setGroupCallActive(true));\r\n  //   store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const joinGroupCall = (hostSocketId, roomId) => {\r\n  //   const localStream = store.getState().call.localStream;\r\n  //   groupCallRoomId = roomId;\r\n  //   wss.userWantsToJoinGroupCall({\r\n  //     peerId: myPeerId,\r\n  //     hostSocketId,\r\n  //     roomId,\r\n  //     localStreamId: localStream.id,\r\n  //   });\r\n  //   store.dispatch(setGroupCallActive(true));\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const connectToNewUser = (data) => {\r\n  //   const localStream = store.getState().call.localStream;\r\n  //   const call = myPeer.call(data.peerId, localStream);\r\n  //   call.on(\"stream\", (incomingStream) => {\r\n  //     const streams = store.getState().call.groupCallStreams;\r\n  //     const stream = streams.find((stream) => stream.id === incomingStream.id);\r\n  //     if (!stream) {\r\n  //       addVideoStream(incomingStream);\r\n  //     }\r\n  //   });\r\n};\r\n\r\nexport const leaveGroupCall = () => {\r\n  //   if (groupCallHost) {\r\n  //     wss.groupCallClosedByHost({\r\n  //       peerId: myPeerId,\r\n  //     });\r\n  //   } else {\r\n  //     wss.userLeftGroupCall({\r\n  //       streamId: store.getState().call.localStream.id,\r\n  //       roomId: groupCallRoomId,\r\n  //     });\r\n  //   }\r\n  //   clearGroupData();\r\n};\r\n\r\nexport const clearGroupData = () => {\r\n  //   groupCallRoomId = null;\r\n  //   groupCallHost = null;\r\n  //   store.dispatch(clearGroupCallData());\r\n  //   myPeer.destroy();\r\n  //   connectWithMyPeer();\r\n  //   const localStream = store.getState().call.localStream;\r\n  //   localStream.getVideoTracks()[0].enabled = true;\r\n  //   localStream.getAudioTracks()[0].enabled = true;\r\n};\r\n\r\nexport const removeInactiveStream = (data) => {\r\n  //   const groupCallStreams = store\r\n  //     .getState()\r\n  //     .call.groupCallStreams.filter((stream) => stream.id !== data.streamId);\r\n  //   store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\r\n};\r\n\r\nconst addVideoStream = (incomingStream) => {\r\n  //   const groupCallStreams = [\r\n  //     ...store.getState().call.groupCallStreams,\r\n  //     incomingStream,\r\n  //   ];\r\n  //   store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\r\n};\r\n\r\n// if group call is active return roomId if not return false\r\nexport const checkActiveGroupCall = () => {\r\n  //   if (store.getState().call.groupCallActive) {\r\n  //     return groupCallRoomId;\r\n  //   } else {\r\n  //     return false;\r\n  //   }\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,gCAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,oBAAT,QAAqC,+BAArC;AAEA,IAAIC,MAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,aAAa,GAAG,KAApB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrCJ,MAAM,GAAG,IAAIK,MAAM,CAACC,IAAX,CAAgBC,SAAhB,EAA2B;IAClCC,IAAI,EAAE,SAD4B;IAElCC,IAAI,EAAE,GAF4B;IAGlCC,IAAI,EAAE;EAH4B,CAA3B,CAAT;EAMAV,MAAM,CAACW,EAAP,CAAU,MAAV,EAAmBC,EAAD,IAAQ;IACxBC,OAAO,CAACC,GAAR,CAAY,wCAAZ;IACAb,QAAQ,GAAGW,EAAX;EACD,CAHD;EAKAZ,MAAM,CAACW,EAAP,CAAU,MAAV,EAAmBI,IAAD,IAAU;IAC1BA,IAAI,CAACC,MAAL,CAAYlB,KAAK,CAACmB,QAAN,GAAiBF,IAAjB,CAAsBG,WAAlC;IACAH,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAmBQ,cAAD,IAAoB;MACpC,MAAMC,OAAO,GAAGtB,KAAK,CAACmB,QAAN,GAAiBF,IAAjB,CAAsBM,gBAAtC;MACA,MAAMC,MAAM,GAAGF,OAAO,CAACG,IAAR,CAAcD,MAAD,IAAYA,MAAM,CAACV,EAAP,KAAcO,cAAc,CAACP,EAAtD,CAAf;;MAEA,IAAI,CAACU,MAAL,EAAa;QACXE,cAAc,CAACL,cAAD,CAAd;MACD;IACF,CAPD;EAQD,CAVD;AAWD,CAvBM;AAyBP,OAAO,MAAMM,kBAAkB,GAAG,MAAM,CACtC;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CARM;AAUP,OAAO,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;EACrD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA9B,KAAK,CAAC+B,QAAN,CAAe9B,oBAAoB,CAAC+B,UAAU,CAACC,gBAAZ,CAAnC;AACD,CAXM;AAaP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAU,CACxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CAVM;AAYP,OAAO,MAAMC,cAAc,GAAG,MAAM,CAClC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CAZM;AAcP,OAAO,MAAMC,cAAc,GAAG,MAAM,CAClC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CATM;AAWP,OAAO,MAAMC,oBAAoB,GAAIH,IAAD,IAAU,CAC5C;EACA;EACA;EACA;AACD,CALM;;AAOP,MAAMT,cAAc,GAAIL,cAAD,IAAoB,CACzC;EACA;EACA;EACA;EACA;AACD,CAND,C,CAQA;;;AACA,OAAO,MAAMkB,oBAAoB,GAAG,MAAM,CACxC;EACA;EACA;EACA;EACA;AACD,CANM"},"metadata":{},"sourceType":"module"}
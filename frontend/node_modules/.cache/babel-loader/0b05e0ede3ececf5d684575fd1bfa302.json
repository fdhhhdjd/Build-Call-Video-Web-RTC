{"ast":null,"code":"import socketClient from \"socket.io-client\";\nimport { setActiveUserInitiate } from \"../../Redux/Action/ActionMain\";\nimport store from \"../../Redux/Store\";\nimport * as webRTCHandler from \"../WebRTCHandler/WebRTCHandler\";\nimport * as webRTCGroupCallHandler from \"../WebRTCHandler/webRTCGroupCallHandler\";\nimport { broadcastEventTypes } from \"../../Utils/ShareData\";\nconst SERVER = \"http://localhost:5001\";\nlet socket;\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on(\"connection\", () => {\n    console.log(\"succesfully connected with wss server\");\n    console.log(socket.id);\n  });\n  socket.on(\"broadcast\", data => {\n    handleBroadcastEvents(data);\n  }); // listeners related with direct call\n\n  socket.on(\"pre-offer\", data => {\n    webRTCHandler.handlePreOffer(data);\n  });\n  socket.on(\"pre-offer-answer\", data => {\n    webRTCHandler.handlePreOfferAnswer(data);\n  });\n  socket.on(\"webRTC-offer\", data => {\n    webRTCHandler.handleOffer(data);\n  });\n  socket.on(\"webRTC-answer\", data => {\n    webRTCHandler.handleAnswer(data);\n  });\n  socket.on(\"webRTC-candidate\", data => {\n    webRTCHandler.handleCandidate(data);\n  });\n  socket.on(\"user-hanged-up\", () => {\n    webRTCHandler.handleUserHangedUp();\n  }); // listeners related with group calls\n\n  socket.on(\"group-call-join-request\", data => {\n    webRTCGroupCallHandler.connectToNewUser(data);\n  });\n  socket.on(\"group-call-user-left\", data => {\n    webRTCGroupCallHandler.removeInactiveStream(data);\n  });\n};\nexport const registerNewUser = username => {\n  socket.emit(\"register-new-user\", {\n    username: username,\n    socketId: socket.id\n  });\n}; // emitting events to server related with direct call\n\nexport const sendPreOffer = data => {\n  console.log(data, \"----dasdasdd----\");\n  socket.emit(\"pre-offer\", data);\n};\nexport const sendPreOfferAnswer = data => {\n  socket.emit(\"pre-offer-answer\", data);\n};\nexport const sendWebRTCOffer = data => {\n  socket.emit(\"webRTC-offer\", data);\n};\nexport const sendWebRTCAnswer = data => {\n  socket.emit(\"webRTC-answer\", data);\n};\nexport const sendWebRTCCandidate = data => {\n  socket.emit(\"webRTC-candidate\", data);\n};\nexport const sendUserHangedUp = data => {\n  socket.emit(\"user-hanged-up\", data);\n}; // emitting events related with group calls\n\nexport const registerGroupCall = data => {\n  socket.emit(\"group-call-register\", data);\n};\nexport const userWantsToJoinGroupCall = data => {\n  socket.emit(\"group-call-join-request\", data);\n};\nexport const userLeftGroupCall = data => {\n  socket.emit(\"group-call-user-left\", data);\n};\nexport const groupCallClosedByHost = data => {\n  socket.emit(\"group-call-closed-by-host\", data);\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\n      const groupCallRooms = data.groupCallRooms.filter(room => room.socketId !== socket.id);\n      const activeGroupCallRoomId = webRTCGroupCallHandler.checkActiveGroupCall();\n\n      if (activeGroupCallRoomId) {\n        const room = groupCallRooms.find(room => room.roomId === activeGroupCallRoomId);\n\n        if (!room) {\n          webRTCGroupCallHandler.clearGroupData();\n        }\n      }\n\n      store.dispatch(dashboardActions.setGroupCalls(groupCallRooms));\n      break;\n\n    default:\n      break;\n  }\n};","map":{"version":3,"names":["socketClient","setActiveUserInitiate","store","webRTCHandler","webRTCGroupCallHandler","broadcastEventTypes","SERVER","socket","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","handlePreOffer","handlePreOfferAnswer","handleOffer","handleAnswer","handleCandidate","handleUserHangedUp","connectToNewUser","removeInactiveStream","registerNewUser","username","emit","socketId","sendPreOffer","sendPreOfferAnswer","sendWebRTCOffer","sendWebRTCAnswer","sendWebRTCCandidate","sendUserHangedUp","registerGroupCall","userWantsToJoinGroupCall","userLeftGroupCall","groupCallClosedByHost","event","ACTIVE_USERS","activeUsers","filter","activeUser","dispatch","dashboardActions","setActiveUsers","GROUP_CALL_ROOMS","groupCallRooms","room","activeGroupCallRoomId","checkActiveGroupCall","find","roomId","clearGroupData","setGroupCalls"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/Connect-Soket/wssConnection.js"],"sourcesContent":["import socketClient from \"socket.io-client\";\r\nimport { setActiveUserInitiate } from \"../../Redux/Action/ActionMain\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as webRTCHandler from \"../WebRTCHandler/WebRTCHandler\";\r\nimport * as webRTCGroupCallHandler from \"../WebRTCHandler/webRTCGroupCallHandler\";\r\n\r\nimport { broadcastEventTypes } from \"../../Utils/ShareData\";\r\nconst SERVER = \"http://localhost:5001\";\r\n\r\nlet socket;\r\n\r\nexport const connectWithWebSocket = () => {\r\n  socket = socketClient(SERVER);\r\n\r\n  socket.on(\"connection\", () => {\r\n    console.log(\"succesfully connected with wss server\");\r\n    console.log(socket.id);\r\n  });\r\n\r\n  socket.on(\"broadcast\", (data) => {\r\n    handleBroadcastEvents(data);\r\n  });\r\n\r\n  // listeners related with direct call\r\n  socket.on(\"pre-offer\", (data) => {\r\n    webRTCHandler.handlePreOffer(data);\r\n  });\r\n\r\n  socket.on(\"pre-offer-answer\", (data) => {\r\n    webRTCHandler.handlePreOfferAnswer(data);\r\n  });\r\n\r\n  socket.on(\"webRTC-offer\", (data) => {\r\n    webRTCHandler.handleOffer(data);\r\n  });\r\n\r\n  socket.on(\"webRTC-answer\", (data) => {\r\n    webRTCHandler.handleAnswer(data);\r\n  });\r\n\r\n  socket.on(\"webRTC-candidate\", (data) => {\r\n    webRTCHandler.handleCandidate(data);\r\n  });\r\n\r\n  socket.on(\"user-hanged-up\", () => {\r\n    webRTCHandler.handleUserHangedUp();\r\n  });\r\n\r\n  // listeners related with group calls\r\n\r\n  socket.on(\"group-call-join-request\", (data) => {\r\n    webRTCGroupCallHandler.connectToNewUser(data);\r\n  });\r\n\r\n  socket.on(\"group-call-user-left\", (data) => {\r\n    webRTCGroupCallHandler.removeInactiveStream(data);\r\n  });\r\n};\r\n\r\nexport const registerNewUser = (username) => {\r\n  socket.emit(\"register-new-user\", {\r\n    username: username,\r\n    socketId: socket.id,\r\n  });\r\n};\r\n\r\n// emitting events to server related with direct call\r\n\r\nexport const sendPreOffer = (data) => {\r\n  console.log(data, \"----dasdasdd----\");\r\n  socket.emit(\"pre-offer\", data);\r\n};\r\n\r\nexport const sendPreOfferAnswer = (data) => {\r\n  socket.emit(\"pre-offer-answer\", data);\r\n};\r\n\r\nexport const sendWebRTCOffer = (data) => {\r\n  socket.emit(\"webRTC-offer\", data);\r\n};\r\n\r\nexport const sendWebRTCAnswer = (data) => {\r\n  socket.emit(\"webRTC-answer\", data);\r\n};\r\n\r\nexport const sendWebRTCCandidate = (data) => {\r\n  socket.emit(\"webRTC-candidate\", data);\r\n};\r\n\r\nexport const sendUserHangedUp = (data) => {\r\n  socket.emit(\"user-hanged-up\", data);\r\n};\r\n\r\n// emitting events related with group calls\r\n\r\nexport const registerGroupCall = (data) => {\r\n  socket.emit(\"group-call-register\", data);\r\n};\r\n\r\nexport const userWantsToJoinGroupCall = (data) => {\r\n  socket.emit(\"group-call-join-request\", data);\r\n};\r\n\r\nexport const userLeftGroupCall = (data) => {\r\n  socket.emit(\"group-call-user-left\", data);\r\n};\r\n\r\nexport const groupCallClosedByHost = (data) => {\r\n  socket.emit(\"group-call-closed-by-host\", data);\r\n};\r\n\r\nconst handleBroadcastEvents = (data) => {\r\n  switch (data.event) {\r\n    case broadcastEventTypes.ACTIVE_USERS:\r\n      const activeUsers = data.activeUsers.filter(\r\n        (activeUser) => activeUser.socketId !== socket.id\r\n      );\r\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\r\n      break;\r\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\r\n      const groupCallRooms = data.groupCallRooms.filter(\r\n        (room) => room.socketId !== socket.id\r\n      );\r\n      const activeGroupCallRoomId =\r\n        webRTCGroupCallHandler.checkActiveGroupCall();\r\n\r\n      if (activeGroupCallRoomId) {\r\n        const room = groupCallRooms.find(\r\n          (room) => room.roomId === activeGroupCallRoomId\r\n        );\r\n        if (!room) {\r\n          webRTCGroupCallHandler.clearGroupData();\r\n        }\r\n      }\r\n      store.dispatch(dashboardActions.setGroupCalls(groupCallRooms));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { resetCallDataStateInitiate, setCallerUsernameInitiate, setCallingDialogVisibleInitiate, setCallRejectedInitiate, setCallStateInitiate, setLocalStreamInitiate } from \"../../Redux/Action/ActionCall\";\nimport { preOfferAnswers, defaultConstrains, configuration, callStates } from \"../ShareData\";\nimport store from \"../../Redux/Store\";\nimport * as wss from \"../Connect-Soket/wssConnection\";\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel;\nlet screenSharingStream; //Get Camera\n\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStreamInitiate(stream));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_AVAILABLE\n    })); // createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n}; //create peer connect\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  }\n\n  peerConnection.ontrack = _ref => {\n    let {\n      streams: [stream]\n    } = _ref;\n    store.dispatch(setRemoteStream(stream));\n  }; // incoming data channel messages\n\n\n  peerConnection.ondatachannel = event => {\n    const dataChannel = event.channel;\n\n    dataChannel.onopen = () => {\n      console.log(\"peer connection is ready to receive data channel messages\");\n    };\n\n    dataChannel.onmessage = event => {\n      store.dispatch(setMessage(true, event.data));\n    };\n  };\n\n  dataChannel = peerConnection.createDataChannel(\"chat\");\n\n  dataChannel.onopen = () => {\n    console.log(\"chat data channel succesfully opened\");\n  };\n\n  peerConnection.onicecandidate = event => {\n    console.log(\"geeting candidates from stun server\");\n\n    if (event.candidate) {\n      wss.sendWebRTCCandidate({\n        candidate: event.candidate,\n        connectedUserSocketId: connectedUserSocketId\n      });\n    }\n  };\n\n  peerConnection.onconnectionstatechange = event => {\n    if (peerConnection.connectionState === \"connected\") {\n      console.log(\"succesfully connected with other peer\");\n    }\n  };\n}; //Call\n\n\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_REQUESTED\n    }));\n    console.log(data, \"========1\");\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n}; //accept call\n\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallStateInitiate({\n    call: callStates.CALL_IN_PROGRESS\n  }));\n}; //reject call\n\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n}; //call\n\nconst sendOffer = async () => {\n  const offer = await peerConnection.createOffer(); // await peerConnection.setLocalDescription(offer);\n  // wss.sendWebRTCOffer({\n  //   calleeSocketId: connectedUserSocketId,\n  //   offer: offer,\n  // });\n};\n\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisibleInitiate(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    sendOffer();\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not able to pick up the call right now\";\n    } else {\n      rejectionReason = \"Call rejected by the callee\";\n    }\n\n    store.dispatch(setCallRejectedInitiate({\n      rejected: true,\n      reason: rejectionReason\n    }));\n    resetCallData();\n  }\n};\nexport const callToOtherUser = calleeDetails => {\n  console.log(calleeDetails, \"=----asdasdas====\");\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallerUsernameInitiate(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisibleInitiate({\n    data: true\n  }));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().user.username\n    }\n  });\n};\nexport const checkIfCallIsPossible = () => {\n  console.log(store.getState().call.localStream, \"oke\");\n\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n}; //Function Reject\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\n}; //show dialog\n\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  resetCallDataAfterHangUp();\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n\n  if (store.getState().call.screenSharingActive) {\n    screenSharingStream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  store.dispatch(resetCallDataStateInitiate());\n};","map":{"version":3,"names":["resetCallDataStateInitiate","setCallerUsernameInitiate","setCallingDialogVisibleInitiate","setCallRejectedInitiate","setCallStateInitiate","setLocalStreamInitiate","preOfferAnswers","defaultConstrains","configuration","callStates","store","wss","connectedUserSocketId","peerConnection","dataChannel","screenSharingStream","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","call","CALL_AVAILABLE","catch","err","console","log","createPeerConnection","RTCPeerConnection","localStream","getState","track","getTracks","addTrack","ontrack","streams","setRemoteStream","ondatachannel","event","channel","onopen","onmessage","setMessage","data","createDataChannel","onicecandidate","candidate","sendWebRTCCandidate","onconnectionstatechange","connectionState","handlePreOffer","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","CALL_NOT_AVAILABLE","acceptIncomingCallRequest","CALL_ACCEPTED","CALL_IN_PROGRESS","rejectIncomingCallRequest","CALL_REJECTED","resetCallData","sendOffer","offer","createOffer","handlePreOfferAnswer","rejectionReason","rejected","reason","callToOtherUser","calleeDetails","socketId","sendPreOffer","callee","caller","username","user","callState","hangUp","sendUserHangedUp","resetCallDataAfterHangUp","close","getVideoTracks","enabled","getAudioTracks","screenSharingActive","forEach","stop"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import {\r\n  resetCallDataStateInitiate,\r\n  setCallerUsernameInitiate,\r\n  setCallingDialogVisibleInitiate,\r\n  setCallRejectedInitiate,\r\n  setCallStateInitiate,\r\n  setLocalStreamInitiate,\r\n} from \"../../Redux/Action/ActionCall\";\r\nimport {\r\n  preOfferAnswers,\r\n  defaultConstrains,\r\n  configuration,\r\n  callStates,\r\n} from \"../ShareData\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as wss from \"../Connect-Soket/wssConnection\";\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\nlet screenSharingStream;\r\n\r\n//Get Camera\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStreamInitiate(stream));\r\n      store.dispatch(setCallStateInitiate({ call: callStates.CALL_AVAILABLE }));\r\n      // createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n//create peer connect\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStream(stream));\r\n  };\r\n\r\n  // incoming data channel messages\r\n  peerConnection.ondatachannel = (event) => {\r\n    const dataChannel = event.channel;\r\n\r\n    dataChannel.onopen = () => {\r\n      console.log(\"peer connection is ready to receive data channel messages\");\r\n    };\r\n\r\n    dataChannel.onmessage = (event) => {\r\n      store.dispatch(setMessage(true, event.data));\r\n    };\r\n  };\r\n\r\n  dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  dataChannel.onopen = () => {\r\n    console.log(\"chat data channel succesfully opened\");\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log(\"geeting candidates from stun server\");\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId,\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === \"connected\") {\r\n      console.log(\"succesfully connected with other peer\");\r\n    }\r\n  };\r\n};\r\n//Call\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\r\n    store.dispatch(setCallStateInitiate({ call: callStates.CALL_REQUESTED }));\r\n    console.log(data, \"========1\");\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n//accept call\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallStateInitiate({ call: callStates.CALL_IN_PROGRESS }));\r\n};\r\n//reject call\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\n//call\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  // await peerConnection.setLocalDescription(offer);\r\n  // wss.sendWebRTCOffer({\r\n  //   calleeSocketId: connectedUserSocketId,\r\n  //   offer: offer,\r\n  // });\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisibleInitiate(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = \"Callee is not able to pick up the call right now\";\r\n    } else {\r\n      rejectionReason = \"Call rejected by the callee\";\r\n    }\r\n    store.dispatch(\r\n      setCallRejectedInitiate({\r\n        rejected: true,\r\n        reason: rejectionReason,\r\n      })\r\n    );\r\n\r\n    resetCallData();\r\n  }\r\n};\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  console.log(calleeDetails, \"=----asdasdas====\");\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallerUsernameInitiate(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisibleInitiate({ data: true }));\r\n\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().user.username,\r\n    },\r\n  });\r\n};\r\nexport const checkIfCallIsPossible = () => {\r\n  console.log(store.getState().call.localStream, \"oke\");\r\n  if (\r\n    store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n//Function Reject\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\r\n};\r\n//show dialog\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n\r\n  resetCallDataAfterHangUp();\r\n};\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach((track) => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataStateInitiate());\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
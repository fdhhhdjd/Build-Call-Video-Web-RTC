{"ast":null,"code":"import { resetCallDataStateInitiate, setCallerUsernameInitiate, setCallingDialogVisibleInitiate, setCallStateInitiate, setLocalStreamInitiate } from \"../../Redux/Action/ActionCall\";\nimport { preOfferAnswers, defaultConstrains, configuration, callStates } from \"../ShareData\";\nimport store from \"../../Redux/Store\";\nimport * as wss from \"../Connect-Soket/wssConnection\";\nlet connectedUserSocketId;\nlet peerConnection;\nlet dataChannel;\nlet screenSharingStream; //Get Camera\n\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStreamInitiate(stream));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_AVAILABLE\n    })); // createPeerConnection();\n  }).catch(err => {\n    console.log(\"error occured when trying to get an access to get local stream\");\n    console.log(err);\n  });\n}; //Call\n\nexport const handlePreOffer = data => {\n  console.log(data, \"========\");\n\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\n    store.dispatch(setCallStateInitiate({\n      call: callStates.CALL_REQUESTED\n    }));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n}; //accept call\n\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\n}; //reject call\n\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const callToOtherUser = calleeDetails => {\n  console.log(calleeDetails, \"=----asdasdas====\");\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallerUsernameInitiate(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisibleInitiate({\n    data: true\n  }));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: calleeDetails.username\n    }\n  });\n};\nexport const checkIfCallIsPossible = () => {\n  console.log(store.localStream);\n\n  if (store.localStream === null || store.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n}; //Function Reject\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\n}; //show dialog\n\nexport const hangUp = () => {\n  wss.sendUserHangedUp({\n    connectedUserSocketId: connectedUserSocketId\n  });\n  resetCallDataAfterHangUp();\n};\n\nconst resetCallDataAfterHangUp = () => {\n  peerConnection.close();\n  peerConnection = null;\n  createPeerConnection();\n  resetCallData();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n\n  if (store.getState().call.screenSharingActive) {\n    screenSharingStream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  store.dispatch(resetCallDataStateInitiate());\n};\n\nconst createPeerConnection = () => {\n  peerConnection = new RTCPeerConnection(configuration);\n  const localStream = store.getState().call.localStream;\n\n  for (const track of localStream.getTracks()) {\n    peerConnection.addTrack(track, localStream);\n  } // peerConnection.ontrack = ({ streams: [stream] }) => {\n  //   store.dispatch(setRemoteStream(stream));\n  // };\n  // incoming data channel messages\n  //   peerConnection.ondatachannel = (event) => {\n  //     const dataChannel = event.channel;\n  //     dataChannel.onopen = () => {\n  //       console.log(\"peer connection is ready to receive data channel messages\");\n  //     };\n  //     dataChannel.onmessage = (event) => {\n  //       store.dispatch(setMessage(true, event.data));\n  //     };\n  //   };\n  //   dataChannel = peerConnection.createDataChannel(\"chat\");\n  //   dataChannel.onopen = () => {\n  //     console.log(\"chat data channel succesfully opened\");\n  //   };\n  //   peerConnection.onicecandidate = (event) => {\n  //     console.log(\"geeting candidates from stun server\");\n  //     if (event.candidate) {\n  //       wss.sendWebRTCCandidate({\n  //         candidate: event.candidate,\n  //         connectedUserSocketId: connectedUserSocketId,\n  //       });\n  //     }\n  //   };\n  //   peerConnection.onconnectionstatechange = (event) => {\n  //     if (peerConnection.connectionState === \"connected\") {\n  //       console.log(\"succesfully connected with other peer\");\n  //     }\n  //   };\n\n};","map":{"version":3,"names":["resetCallDataStateInitiate","setCallerUsernameInitiate","setCallingDialogVisibleInitiate","setCallStateInitiate","setLocalStreamInitiate","preOfferAnswers","defaultConstrains","configuration","callStates","store","wss","connectedUserSocketId","peerConnection","dataChannel","screenSharingStream","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","call","CALL_AVAILABLE","catch","err","console","log","handlePreOffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","CALL_NOT_AVAILABLE","acceptIncomingCallRequest","CALL_ACCEPTED","CALL_IN_PROGRESS","rejectIncomingCallRequest","CALL_REJECTED","resetCallData","callToOtherUser","calleeDetails","socketId","sendPreOffer","callee","caller","username","localStream","callState","hangUp","sendUserHangedUp","resetCallDataAfterHangUp","close","createPeerConnection","getState","getVideoTracks","enabled","getAudioTracks","screenSharingActive","getTracks","forEach","track","stop","RTCPeerConnection","addTrack"],"sources":["D:/Full-Stack-Developer/Call-Video-FullStack/frontend/src/Utils/WebRTCHandler/WebRTCHandler.js"],"sourcesContent":["import {\r\n  resetCallDataStateInitiate,\r\n  setCallerUsernameInitiate,\r\n  setCallingDialogVisibleInitiate,\r\n  setCallStateInitiate,\r\n  setLocalStreamInitiate,\r\n} from \"../../Redux/Action/ActionCall\";\r\nimport {\r\n  preOfferAnswers,\r\n  defaultConstrains,\r\n  configuration,\r\n  callStates,\r\n} from \"../ShareData\";\r\nimport store from \"../../Redux/Store\";\r\nimport * as wss from \"../Connect-Soket/wssConnection\";\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\nlet dataChannel;\r\nlet screenSharingStream;\r\n\r\n//Get Camera\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices\r\n    .getUserMedia(defaultConstrains)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStreamInitiate(stream));\r\n      store.dispatch(setCallStateInitiate({ call: callStates.CALL_AVAILABLE }));\r\n      // createPeerConnection();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occured when trying to get an access to get local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n//Call\r\nexport const handlePreOffer = (data) => {\r\n  console.log(data, \"========\");\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsernameInitiate(data.callerUsername));\r\n    store.dispatch(setCallStateInitiate({ call: callStates.CALL_REQUESTED }));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\r\n    });\r\n  }\r\n};\r\n//accept call\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED,\r\n  });\r\n\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_IN_PROGRESS));\r\n};\r\n//reject call\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED,\r\n  });\r\n  resetCallData();\r\n};\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  console.log(calleeDetails, \"=----asdasdas====\");\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallerUsernameInitiate(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisibleInitiate({ data: true }));\r\n\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: calleeDetails.username,\r\n    },\r\n  });\r\n};\r\nexport const checkIfCallIsPossible = () => {\r\n  console.log(store.localStream);\r\n  if (\r\n    store.localStream === null ||\r\n    store.callState !== callStates.CALL_AVAILABLE\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n//Function Reject\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallStateInitiate(callStates.CALL_AVAILABLE));\r\n};\r\n//show dialog\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId,\r\n  });\r\n\r\n  resetCallDataAfterHangUp();\r\n};\r\nconst resetCallDataAfterHangUp = () => {\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach((track) => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataStateInitiate());\r\n};\r\n\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  // peerConnection.ontrack = ({ streams: [stream] }) => {\r\n  //   store.dispatch(setRemoteStream(stream));\r\n  // };\r\n\r\n  // incoming data channel messages\r\n  //   peerConnection.ondatachannel = (event) => {\r\n  //     const dataChannel = event.channel;\r\n\r\n  //     dataChannel.onopen = () => {\r\n  //       console.log(\"peer connection is ready to receive data channel messages\");\r\n  //     };\r\n\r\n  //     dataChannel.onmessage = (event) => {\r\n  //       store.dispatch(setMessage(true, event.data));\r\n  //     };\r\n  //   };\r\n\r\n  //   dataChannel = peerConnection.createDataChannel(\"chat\");\r\n\r\n  //   dataChannel.onopen = () => {\r\n  //     console.log(\"chat data channel succesfully opened\");\r\n  //   };\r\n\r\n  //   peerConnection.onicecandidate = (event) => {\r\n  //     console.log(\"geeting candidates from stun server\");\r\n  //     if (event.candidate) {\r\n  //       wss.sendWebRTCCandidate({\r\n  //         candidate: event.candidate,\r\n  //         connectedUserSocketId: connectedUserSocketId,\r\n  //       });\r\n  //     }\r\n  //   };\r\n\r\n  //   peerConnection.onconnectionstatechange = (event) => {\r\n  //     if (peerConnection.connectionState === \"connected\") {\r\n  //       console.log(\"succesfully connected with other peer\");\r\n  //     }\r\n  //   };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}